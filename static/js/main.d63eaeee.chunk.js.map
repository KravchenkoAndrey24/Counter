{"version":3,"sources":["components/Settings/Settings.module.css","components/counter.module.css","App.module.css","components/Button/Button.tsx","components/counter.tsx","components/Settings/Values/Values.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","disabled","onClick","title","Counter","disabledButton","textValues","textError","count","maxValue","className","s","main__block","counter","main__block__textColor","div__buttons","onClickInc","minValue","onClickReset","Values","text","type","ref","createRef","value","onChange","e","currentTarget","Settings","inputMaxValue","React","inputMinValue","useState","values","maxValueInInput","setMaxValueInInput","minValueInInput","setMinValueInInput","setTextValues","setError","current","classList","add","input_red_max","remove","target","setValues","App","setCount","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d63eaeee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main__block\":\"Settings_main__block__3jeVH\",\"values\":\"Settings_values__L8D44\",\"MaxAndMinValues\":\"Settings_MaxAndMinValues__2ObtW\",\"input\":\"Settings_input__2-3Ed\",\"div__buttons\":\"Settings_div__buttons__3kMFc\",\"input_red_min\":\"Settings_input_red_min__3ustD\",\"input_red_max\":\"Settings_input_red_max__30ptE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main__block\":\"counter_main__block__Jv_LK\",\"counter\":\"counter_counter__2sUTt\",\"main__block__textColor\":\"counter_main__block__textColor__CoVu6\",\"div__buttons\":\"counter_div__buttons__2FKzL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App___B1oS\"};","import React from 'react';\r\n\r\ntype ButtonPropsType = {\r\n\ttitle: string\r\n\tdisabled: boolean\r\n\tonClick: () => void\r\n}\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n\treturn (\r\n\t\t<button disabled={props.disabled} onClick={props.onClick}>{props.title}</button>\r\n\t)\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './Button/Button';\r\nimport s from './counter.module.css'\r\n\r\ntype CounterPropsType = {\r\n\tcount: number\r\n\tmaxValue: string\r\n\tminValue: string\r\n\ttextError: string\r\n\ttextValues: string\r\n\tonClickInc: () => void\r\n\tonClickReset: () => void\r\n}\r\n\r\n\r\n\r\n\r\nconst Counter = (props: CounterPropsType) => {\r\n\r\n\tconst onClickInc = () => { props.onClickInc() }\r\n\tconst onClickReset = () => { props.onClickReset() }\r\n\r\n\tlet disabledButton = props.textValues ? true : props.textError ? true : props.count >= +props.maxValue;\r\n\r\n\treturn (\r\n\t\t<div className={s.main__block}>\r\n\t\t\t<div className={`${s.counter}   ${props.textError ? s.main__block__textColor : props.count >= +props.maxValue ? s.main__block__textColor : null}`}>\r\n\t\t\t\t{\r\n\t\t\t\t\tprops.textValues ? props.textValues : !props.textError ? props.count : props.textError\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.div__buttons}>\r\n\t\t\t\t<Button disabled={disabledButton} onClick={onClickInc} title={'inc'} />\r\n\t\t\t\t<Button disabled={props.count === +props.minValue} onClick={onClickReset} title={'reset'} />\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\nexport default Counter;","import React, { ChangeEvent, RefObject } from 'react';\r\n\r\n\r\ntype ValuesProps = {\r\n\ttext: string\r\n\tcreateRef: RefObject<HTMLInputElement>\r\n\tvalue: string\r\n\tonChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst Values = (props: ValuesProps) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{props.text}\r\n\t\t\t<input type=\"number\" ref={props.createRef} value={props.value} onChange={(e) => { +e.currentTarget.value >= 0 ? props.onChange(e) : props.onChange(e) }} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Values;\r\n\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport Button from '../Button/Button';\r\nimport s from './Settings.module.css'\r\nimport Values from './Values/Values';\r\n\r\ntype SettingsPropsType = {\r\n\tvalues: string[]\r\n\terror: string\r\n\ttextValues: string\r\n\tsetError: (error: string) => void\r\n\tsetValues: (values: string[]) => void\r\n\tsetTextValues: (textValues: string) => void\r\n}\r\n\r\n\r\n\r\n\r\nconst Settings = (props: SettingsPropsType) => {\r\n\r\n\tlet inputMaxValue = React.createRef<HTMLInputElement>();\r\n\tlet inputMinValue = React.createRef<HTMLInputElement>();\r\n\r\n\tlet [maxValueInInput, setMaxValueInInput] = useState(props.values[1]);\r\n\tlet [minValueInInput, setMinValueInInput] = useState(props.values[0]);\r\n\r\n\r\n\tlet disabledButton = !props.textValues ? true : false\r\n\r\n\tconst onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tprops.setTextValues(\"set values and press 'set'\");\r\n\t\tif (+e.currentTarget.value <= +minValueInInput) {\r\n\t\t\tprops.setTextValues('');\r\n\t\t\tprops.setError('Incorrect value');\r\n\t\t\tinputMinValue.current?.classList.add(s.input_red_max)\r\n\t\t\tinputMaxValue.current?.classList.add(s.input_red_max)\r\n\t\t\tsetMaxValueInInput(e.currentTarget.value);\r\n\t\t} else if (e.currentTarget.value) {\r\n\t\t\tif (+minValueInInput < 0) {\r\n\t\t\t\tprops.setTextValues('');\r\n\t\t\t\tprops.setError(\"Incorrect value\");\r\n\t\t\t} else {\r\n\t\t\t\tprops.setError('')\r\n\t\t\t\tinputMinValue.current?.classList.remove(s.input_red_max)\r\n\t\t\t\tinputMaxValue.current?.classList.remove(s.input_red_max)\r\n\t\t\t}\r\n\t\t\tsetMaxValueInInput(e.currentTarget.value);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst onChangeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tprops.setTextValues(\"set values and press 'set'\");\r\n\t\tif (+e.currentTarget.value >= +maxValueInInput) {\r\n\t\t\tprops.setTextValues('')\r\n\t\t\tprops.setError('Incorrect value')\r\n\t\t\te.target.classList.add(s.input_red_max);\r\n\t\t\tsetMinValueInInput(e.currentTarget.value);\r\n\t\t} else if (e.currentTarget.value) {\r\n\t\t\tif (+e.currentTarget.value < 0) {\r\n\t\t\t\tprops.setTextValues('')\r\n\t\t\t\tprops.setError(\"Incorrect value\");\r\n\t\t\t\te.target.classList.add(s.input_red_max);\r\n\t\t\t} else {\r\n\t\t\t\tprops.setError('')\r\n\t\t\t\tinputMaxValue.current?.classList.remove(s.input_red_max)\r\n\t\t\t\te.target.classList.remove(s.input_red_max);\r\n\t\t\t}\r\n\t\t\tsetMinValueInInput(e.currentTarget.value);\r\n\t\t}\r\n\t}\r\n\r\n\tconst onClickSetButton = () => {\r\n\t\tprops.setValues([minValueInInput, maxValueInInput])\r\n\t}\r\n\treturn (\r\n\t\t<div className={s.main__block}>\r\n\t\t\t<div className={s.values}>\r\n\t\t\t\t<Values text={'max value: '} createRef={inputMaxValue} value={maxValueInInput} onChange={onChangeMaxValue} />\r\n\t\t\t\t<Values text={'min value: '} createRef={inputMinValue} value={minValueInInput} onChange={onChangeMinValue} />\r\n\t\t\t</div>\r\n\t\t\t<div className={s.div__buttons}>\r\n\t\t\t\t<Button disabled={disabledButton} onClick={onClickSetButton} title={'set'} />\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\nexport default Settings;","import React, { useState } from 'react';\nimport s from './App.module.css'\nimport Counter from './components/counter';\nimport Settings from './components/Settings/Settings';\n\nfunction App() {\n\n\n  let [count, setCount] = useState<number>(0);\n\n  let [values, setValues] = useState<string[]>(['0', '5']);\n\n  let [error, setError] = useState<string>('');\n\n  let [textValues, setTextValues] = useState<string>('');\n\n\n  const onClickInc = () => {\n    if (count < +values[1]) {\n      setCount(count + 1)\n    }\n  }\n\n  const onClickReset = () => {\n    setCount(+values[0])\n  }\n\n\n\n  const onClickSet = (values: string[]) => {\n    setValues(values)\n    setCount(+values[0])\n    setTextValues('')\n  }\n\n\n  return (\n    <div className={s.App}>\n      <Settings values={values} setValues={onClickSet} error={error} setError={setError} textValues={textValues} setTextValues={setTextValues} />\n\n      <Counter count={count} maxValue={values[1]} minValue={values[0]} textError={error} textValues={textValues} onClickInc={onClickInc} onClickReset={onClickReset} />\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}